"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Organizations = void 0;
var novu_interface_1 = require("../novu.interface");
var Organizations = (function (_super) {
    __extends(Organizations, _super);
    function Organizations() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Organizations.prototype.list = function () {
        return this.http.get('/organizations');
    };
    Organizations.prototype.create = function (payload) {
        return this.http.post('/organizations', payload);
    };
    Organizations.prototype.rename = function (payload) {
        return this.http.patch('/organizations', payload);
    };
    Organizations.prototype.getCurrent = function () {
        return this.http.get('/organizations/me');
    };
    Organizations.prototype.removeMember = function (memberId) {
        return this.http.delete("/organizations/members/".concat(memberId));
    };
    Organizations.prototype.updateMemberRole = function (memberId, payload) {
        return this.http.put("/organizations/members/".concat(memberId, "/roles"), payload);
    };
    Organizations.prototype.getMembers = function () {
        return this.http.get('/organizations/members');
    };
    Organizations.prototype.updateBranding = function (payload) {
        return this.http.put('/organizations/branding', payload);
    };
    return Organizations;
}(novu_interface_1.WithHttp));
exports.Organizations = Organizations;
