import axios from 'axios';
import { getEnvVariable } from '@novu/shared/utils';
import { EventEmitter } from 'events';
import { Subscribers } from './subscribers/subscribers';
import { Changes } from './changes/changes';
import { Events } from './events/events';
import { Layouts } from './layouts/layouts';
import { NotificationGroups } from './notification-groups/notification-groups';
import { NotificationTemplates } from './notification-template/notification-template';
import { Environments } from './environments/environments';
import { Feeds } from './feeds/feeds';
import { Topics } from './topics/topics';
import { Integrations } from './integrations/integrations';
import { Messages } from './messages/messages';
import { Tenants } from './tenants/tenants';
import { ExecutionDetails } from './execution-details/execution-details';
import { InboundParse } from './inbound-parse/inbound-parse';
import { Organizations } from './organizations/organizations';
import { WorkflowOverrides } from './workflow-override/workflow-override';
import { makeRetryable } from './retry';
export class Novu extends EventEmitter {
    secretKey;
    http;
    subscribers;
    environments;
    events;
    changes;
    layouts;
    notificationGroups;
    notificationTemplates;
    feeds;
    topics;
    integrations;
    messages;
    tenants;
    executionDetails;
    inboundParse;
    organizations;
    workflowOverrides;
    constructor(...args) {
        super();
        let secretKey;
        let config;
        if (arguments.length === 2) {
            [secretKey, config] = args;
        }
        else if (arguments.length === 1) {
            if (typeof args[0] === 'object') {
                const { secretKey: key, ...rest } = args[0];
                secretKey = key;
                config = rest;
            }
            else {
                [secretKey] = args;
            }
        }
        else {
            secretKey =
                getEnvVariable('NOVU_SECRET_KEY') || getEnvVariable('NOVU_API_KEY');
        }
        if (!secretKey) {
            throw new Error('Missing secret key. Set the NOVU_SECRET_KEY environment variable or pass a secretKey to new Novu(secretKey) constructor.');
        }
        this.secretKey = secretKey;
        const axiosInstance = axios.create({
            baseURL: this.buildBackendUrl(config),
            headers: {
                Authorization: `ApiKey ${this.secretKey}`,
            },
        });
        if (config?.retryConfig) {
            makeRetryable(axiosInstance, config);
        }
        this.http = axiosInstance;
        this.subscribers = new Subscribers(this.http);
        this.environments = new Environments(this.http);
        this.events = new Events(this.http);
        this.changes = new Changes(this.http);
        this.layouts = new Layouts(this.http);
        this.notificationGroups = new NotificationGroups(this.http);
        this.notificationTemplates = new NotificationTemplates(this.http);
        this.feeds = new Feeds(this.http);
        this.topics = new Topics(this.http);
        this.integrations = new Integrations(this.http);
        this.messages = new Messages(this.http);
        this.tenants = new Tenants(this.http);
        this.executionDetails = new ExecutionDetails(this.http);
        this.inboundParse = new InboundParse(this.http);
        this.organizations = new Organizations(this.http);
        this.workflowOverrides = new WorkflowOverrides(this.http);
        this.trigger = this.events.trigger;
        this.bulkTrigger = this.events.bulkTrigger;
        this.broadcast = this.events.broadcast;
    }
    trigger;
    bulkTrigger;
    broadcast;
    buildBackendUrl(config) {
        const novuApiVersion = 'v1';
        if (!config?.backendUrl) {
            return `https://api.novu.co/${novuApiVersion}`;
        }
        return config?.backendUrl.includes('novu.co/v')
            ? config?.backendUrl
            : `${config?.backendUrl}/${novuApiVersion}`;
    }
}
