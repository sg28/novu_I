import { S as Schema, F as FromSchemaUnvalidated, a as FromSchema, J as JsonSchema, E as Execute, W as WorkflowOptions, b as Workflow } from './handler-_mH7Q42O.js';
export { K as ActionStep, A as ActionStepEnum, ah as Awaitable, q as CancelEventTriggerResponse, as as ChannelPreference, M as ChannelStep, f as ChannelStepEnum, _ as ChatOutput, $ as ChatOutputUnvalidated, a0 as ChatResult, C as Client, i as ClientOptions, h as CodeResult, aj as ConditionalPartial, L as CustomStep, ap as DeepPartial, a4 as DelayOutput, a5 as DelayOutputUnvalidated, a6 as DelayResult, ab as DigestOutput, ac as DigestOutputUnvalidated, a7 as DigestRegularOutput, a8 as DigestRegularOutputUnvalidated, ad as DigestResult, a9 as DigestTimedOutput, aa as DigestTimedOutputUnvalidated, m as DiscoverOutput, D as DiscoverProviderOutput, k as DiscoverStepOutput, l as DiscoverWorkflowOutput, ag as Either, O as EmailOutput, Q as EmailOutputUnvalidated, R as EmailResult, r as Event, o as EventTriggerParams, p as EventTriggerResponse, n as EventTriggerResult, aq as ExecuteInput, v as ExecuteOutput, t as ExecuteOutputMetadata, u as ExecuteOutputOptions, G as GetActionEnum, H as HealthCheck, a1 as InAppOutput, a2 as InAppOutputUnvalidated, a3 as InAppResult, ak as Indexable, z as JobStatusEnum, N as NovuRequestHandler, al as PickOptional, ao as PickOptionalKeys, am as PickRequired, an as PickRequiredKeys, P as PostActionEnum, ai as Prettify, X as PushOutput, Y as PushOutputUnvalidated, Z as PushResult, c as ServeHandlerOptions, x as Skip, T as SmsOutput, U as SmsOutputUnvalidated, V as SmsResult, s as State, ae as Step, B as StepContext, y as StepOptions, I as StepOutput, j as StepType, af as Subscriber, w as SupportedFrameworkName, g as WorkflowChannelEnum, ar as WorkflowPreference, at as WorkflowPreferences, d as actionStepSchemas, e as channelStepSchemas } from './handler-_mH7Q42O.js';
import { ValidateFunction as ValidateFunction$1 } from 'ajv';
import { ParseReturnType } from 'zod';
import '@novu/shared';
import 'json-schema-to-ts';

declare enum NovuApiEndpointsEnum {
    SYNC = "/v1/bridge/sync",
    DIFF = "/v1/bridge/diff"
}
declare const SIGNATURE_TIMESTAMP_TOLERANCE_MINUTES = 5;
declare const SIGNATURE_TIMESTAMP_TOLERANCE: number;

/**
 * Cron expression helper.
 */
declare enum CronExpression {
    EVERY_SECOND = "* * * * * *",
    EVERY_5_SECONDS = "*/5 * * * * *",
    EVERY_10_SECONDS = "*/10 * * * * *",
    EVERY_30_SECONDS = "*/30 * * * * *",
    EVERY_MINUTE = "*/1 * * * *",
    EVERY_5_MINUTES = "0 */5 * * * *",
    EVERY_10_MINUTES = "0 */10 * * * *",
    EVERY_30_MINUTES = "0 */30 * * * *",
    EVERY_HOUR = "0 0-23/1 * * *",
    EVERY_2_HOURS = "0 0-23/2 * * *",
    EVERY_3_HOURS = "0 0-23/3 * * *",
    EVERY_4_HOURS = "0 0-23/4 * * *",
    EVERY_5_HOURS = "0 0-23/5 * * *",
    EVERY_6_HOURS = "0 0-23/6 * * *",
    EVERY_7_HOURS = "0 0-23/7 * * *",
    EVERY_8_HOURS = "0 0-23/8 * * *",
    EVERY_9_HOURS = "0 0-23/9 * * *",
    EVERY_10_HOURS = "0 0-23/10 * * *",
    EVERY_11_HOURS = "0 0-23/11 * * *",
    EVERY_12_HOURS = "0 0-23/12 * * *",
    EVERY_DAY_AT_1AM = "0 01 * * *",
    EVERY_DAY_AT_2AM = "0 02 * * *",
    EVERY_DAY_AT_3AM = "0 03 * * *",
    EVERY_DAY_AT_4AM = "0 04 * * *",
    EVERY_DAY_AT_5AM = "0 05 * * *",
    EVERY_DAY_AT_6AM = "0 06 * * *",
    EVERY_DAY_AT_7AM = "0 07 * * *",
    EVERY_DAY_AT_8AM = "0 08 * * *",
    EVERY_DAY_AT_9AM = "0 09 * * *",
    EVERY_DAY_AT_10AM = "0 10 * * *",
    EVERY_DAY_AT_11AM = "0 11 * * *",
    EVERY_DAY_AT_NOON = "0 12 * * *",
    EVERY_DAY_AT_1PM = "0 13 * * *",
    EVERY_DAY_AT_2PM = "0 14 * * *",
    EVERY_DAY_AT_3PM = "0 15 * * *",
    EVERY_DAY_AT_4PM = "0 16 * * *",
    EVERY_DAY_AT_5PM = "0 17 * * *",
    EVERY_DAY_AT_6PM = "0 18 * * *",
    EVERY_DAY_AT_7PM = "0 19 * * *",
    EVERY_DAY_AT_8PM = "0 20 * * *",
    EVERY_DAY_AT_9PM = "0 21 * * *",
    EVERY_DAY_AT_10PM = "0 22 * * *",
    EVERY_DAY_AT_11PM = "0 23 * * *",
    EVERY_DAY_AT_MIDNIGHT = "0 0 * * *",
    EVERY_WEEK = "0 0 * * 0",
    EVERY_WEEKDAY = "0 0 * * 1-5",
    EVERY_WEEKEND = "0 0 * * 6,0",
    EVERY_1ST_DAY_OF_MONTH_AT_MIDNIGHT = "0 0 1 * *",
    EVERY_1ST_DAY_OF_MONTH_AT_NOON = "0 12 1 * *",
    EVERY_2ND_HOUR = "0 */2 * * *",
    EVERY_2ND_HOUR_FROM_1AM_THROUGH_11PM = "0 1-23/2 * * *",
    EVERY_2ND_MONTH = "0 0 1 */2 *",
    EVERY_QUARTER = "0 0 1 */3 *",
    EVERY_6_MONTHS = "0 0 1 */6 *",
    EVERY_YEAR = "0 0 1 0 *",
    EVERY_30_MINUTES_BETWEEN_9AM_AND_5PM = "0 */30 9-17 * * *",
    EVERY_30_MINUTES_BETWEEN_9AM_AND_6PM = "0 */30 9-18 * * *",
    EVERY_30_MINUTES_BETWEEN_10AM_AND_7PM = "0 */30 10-19 * * *",
    MONDAY_TO_FRIDAY_AT_1AM = "0 0 01 * * 1-5",
    MONDAY_TO_FRIDAY_AT_2AM = "0 0 02 * * 1-5",
    MONDAY_TO_FRIDAY_AT_3AM = "0 0 03 * * 1-5",
    MONDAY_TO_FRIDAY_AT_4AM = "0 0 04 * * 1-5",
    MONDAY_TO_FRIDAY_AT_5AM = "0 0 05 * * 1-5",
    MONDAY_TO_FRIDAY_AT_6AM = "0 0 06 * * 1-5",
    MONDAY_TO_FRIDAY_AT_7AM = "0 0 07 * * 1-5",
    MONDAY_TO_FRIDAY_AT_8AM = "0 0 08 * * 1-5",
    MONDAY_TO_FRIDAY_AT_9AM = "0 0 09 * * 1-5",
    MONDAY_TO_FRIDAY_AT_09_30AM = "0 30 09 * * 1-5",
    MONDAY_TO_FRIDAY_AT_10AM = "0 0 10 * * 1-5",
    MONDAY_TO_FRIDAY_AT_11AM = "0 0 11 * * 1-5",
    MONDAY_TO_FRIDAY_AT_11_30AM = "0 30 11 * * 1-5",
    MONDAY_TO_FRIDAY_AT_12PM = "0 0 12 * * 1-5",
    MONDAY_TO_FRIDAY_AT_1PM = "0 0 13 * * 1-5",
    MONDAY_TO_FRIDAY_AT_2PM = "0 0 14 * * 1-5",
    MONDAY_TO_FRIDAY_AT_3PM = "0 0 15 * * 1-5",
    MONDAY_TO_FRIDAY_AT_4PM = "0 0 16 * * 1-5",
    MONDAY_TO_FRIDAY_AT_5PM = "0 0 17 * * 1-5",
    MONDAY_TO_FRIDAY_AT_6PM = "0 0 18 * * 1-5",
    MONDAY_TO_FRIDAY_AT_7PM = "0 0 19 * * 1-5",
    MONDAY_TO_FRIDAY_AT_8PM = "0 0 20 * * 1-5",
    MONDAY_TO_FRIDAY_AT_9PM = "0 0 21 * * 1-5",
    MONDAY_TO_FRIDAY_AT_10PM = "0 0 22 * * 1-5",
    MONDAY_TO_FRIDAY_AT_11PM = "0 0 23 * * 1-5"
}

declare enum ErrorCodeEnum {
    WORKFLOW_NOT_FOUND_ERROR = "WorkflowNotFoundError",
    WORKFLOW_ALREADY_EXISTS_ERROR = "WorkflowAlreadyExistsError",
    WORKFLOW_EXECUTION_FAILED_ERROR = "WorkflowExecutionFailedError",
    EXECUTION_STATE_OUTPUT_INVALID_ERROR = "ExecutionStateOutputInvalidError",
    EXECUTION_STATE_RESULT_INVALID_ERROR = "ExecutionStateResultInvalidError",
    EXECUTION_PROVIDER_OUTPUT_INVALID_ERROR = "ExecutionProviderOutputInvalidError",
    PROVIDER_NOT_FOUND_ERROR = "ProviderNotFoundError",
    PROVIDER_EXECUTION_FAILED_ERROR = "ProviderExecutionFailedError",
    STEP_NOT_FOUND_ERROR = "StepNotFoundError",
    STEP_ALREADY_EXISTS_ERROR = "StepAlreadyExistsError",
    STEP_EXECUTION_FAILED_ERROR = "StepExecutionFailedError",
    EXECUTION_STATE_CORRUPT_ERROR = "ExecutionStateCorruptError",
    EXECUTION_EVENT_PAYLOAD_INVALID_ERROR = "ExecutionEventPayloadInvalidError",
    EXECUTION_EVENT_CONTROL_INVALID_ERROR = "ExecutionEventControlInvalidError",
    EXECUTION_STATE_CONTROL_INVALID_ERROR = "ExecutionStateControlInvalidError",
    STEP_CONTROL_COMPILATION_FAILED_ERROR = "StepControlCompilationFailedError",
    METHOD_NOT_ALLOWED_ERROR = "MethodNotAllowedError",
    INVALID_ACTION_ERROR = "InvalidActionError",
    MISSING_SECRET_KEY_ERROR = "MissingSecretKeyError",
    SIGNATURE_MISMATCH_ERROR = "SignatureMismatchError",
    SIGNATURE_NOT_FOUND_ERROR = "SignatureNotFoundError",
    SIGNATURE_INVALID_ERROR = "SignatureInvalidError",
    SIGNATURE_EXPIRED_ERROR = "SignatureExpiredError",
    SIGNING_KEY_NOT_FOUND_ERROR = "SigningKeyNotFoundError",
    BRIDGE_ERROR = "BridgeError",
    SIGNATURE_VERSION_INVALID_ERROR = "SignatureVersionInvalidError",
    WORKFLOW_PAYLOAD_INVALID_ERROR = "WorkflowPayloadInvalidError"
}

declare enum HttpHeaderKeysEnum {
    NOVU_SIGNATURE = "novu-signature",
    NOVU_ANONYMOUS = "novu-anonymous",
    NOVU_SIGNATURE_DEPRECATED = "x-novu-signature",
    NOVU_ANONYMOUS_DEPRECATED = "x-novu-anonymous",
    NOVU_FRAMEWORK_SDK = "novu-framework-sdk",
    NOVU_FRAMEWORK_SERVER = "novu-framework-server",
    NOVU_FRAMEWORK_VERSION = "novu-framework-version",
    USER_AGENT = "user-agent",
    CONTENT_TYPE = "content-type",
    ACCESS_CONTROL_ALLOW_ORIGIN = "access-control-allow-origin",
    ACCESS_CONTROL_ALLOW_METHODS = "access-control-allow-methods",
    ACCESS_CONTROL_ALLOW_HEADERS = "access-control-allow-headers",
    ACCESS_CONTROL_MAX_AGE = "access-control-max-age"
}

declare enum HttpMethodEnum {
    POST = "POST",
    GET = "GET",
    OPTIONS = "OPTIONS"
}

declare enum HttpQueryKeysEnum {
    WORKFLOW_ID = "workflowId",
    STEP_ID = "stepId",
    ACTION = "action",
    SOURCE = "source"
}

declare enum HttpStatusEnum {
    CONTINUE = 100,
    SWITCHING_PROTOCOLS = 101,
    PROCESSING = 102,
    EARLYHINTS = 103,
    OK = 200,
    CREATED = 201,
    ACCEPTED = 202,
    NON_AUTHORITATIVE_INFORMATION = 203,
    NO_CONTENT = 204,
    RESET_CONTENT = 205,
    PARTIAL_CONTENT = 206,
    AMBIGUOUS = 300,
    MOVED_PERMANENTLY = 301,
    FOUND = 302,
    SEE_OTHER = 303,
    NOT_MODIFIED = 304,
    TEMPORARY_REDIRECT = 307,
    PERMANENT_REDIRECT = 308,
    BAD_REQUEST = 400,
    UNAUTHORIZED = 401,
    PAYMENT_REQUIRED = 402,
    FORBIDDEN = 403,
    NOT_FOUND = 404,
    METHOD_NOT_ALLOWED = 405,
    NOT_ACCEPTABLE = 406,
    PROXY_AUTHENTICATION_REQUIRED = 407,
    REQUEST_TIMEOUT = 408,
    CONFLICT = 409,
    GONE = 410,
    LENGTH_REQUIRED = 411,
    PRECONDITION_FAILED = 412,
    PAYLOAD_TOO_LARGE = 413,
    URI_TOO_LONG = 414,
    UNSUPPORTED_MEDIA_TYPE = 415,
    REQUESTED_RANGE_NOT_SATISFIABLE = 416,
    EXPECTATION_FAILED = 417,
    I_AM_A_TEAPOT = 418,
    MISDIRECTED = 421,
    UNPROCESSABLE_ENTITY = 422,
    FAILED_DEPENDENCY = 424,
    PRECONDITION_REQUIRED = 428,
    TOO_MANY_REQUESTS = 429,
    INTERNAL_SERVER_ERROR = 500,
    NOT_IMPLEMENTED = 501,
    BAD_GATEWAY = 502,
    SERVICE_UNAVAILABLE = 503,
    GATEWAY_TIMEOUT = 504,
    HTTP_VERSION_NOT_SUPPORTED = 505
}
declare const RETRYABLE_ERROR_STATUS_CODES: HttpStatusEnum[];

declare enum ResourceEnum {
    WORKFLOW = "workflow",
    PROVIDER = "provider",
    STEP = "step"
}

declare const SDK_VERSION: string;
declare const FRAMEWORK_VERSION = "2024-06-26";

type ValidateFunction<T = unknown> = ValidateFunction$1<T> | ((data: T) => ParseReturnType<T>);
type ValidationError = {
    path: string;
    message: string;
};
type ValidateResult<T> = {
    success: false;
    errors: ValidationError[];
} | {
    success: true;
    data: T;
};
interface Validator<T_Schema extends Schema = Schema> {
    validate: <T_Unvalidated extends Record<string, unknown> = FromSchemaUnvalidated<T_Schema>, T_Validated extends Record<string, unknown> = FromSchema<T_Schema>>(data: T_Unvalidated, schema: T_Schema) => Promise<ValidateResult<T_Validated>>;
    canHandle: (schema: Schema) => schema is T_Schema;
    transformToJsonSchema: (schema: T_Schema) => JsonSchema;
}

/**
 * Define a new notification workflow.
 */
declare function workflow<T_PayloadSchema extends Schema, T_ControlSchema extends Schema, T_PayloadValidated extends Record<string, unknown> = FromSchema<T_PayloadSchema>, T_PayloadUnvalidated extends Record<string, unknown> = FromSchemaUnvalidated<T_PayloadSchema>, T_Controls extends Record<string, unknown> = FromSchema<T_ControlSchema>>(workflowId: string, execute: Execute<T_PayloadValidated, T_Controls>, workflowOptions?: WorkflowOptions<T_PayloadSchema, T_ControlSchema>): Workflow<T_PayloadUnvalidated>;

export { CronExpression, ErrorCodeEnum, Execute, FRAMEWORK_VERSION, FromSchema, FromSchemaUnvalidated, HttpHeaderKeysEnum, HttpMethodEnum, HttpQueryKeysEnum, HttpStatusEnum, JsonSchema, NovuApiEndpointsEnum, RETRYABLE_ERROR_STATUS_CODES, ResourceEnum, SDK_VERSION, SIGNATURE_TIMESTAMP_TOLERANCE, SIGNATURE_TIMESTAMP_TOLERANCE_MINUTES, Schema, type ValidateFunction, type ValidateResult, type ValidationError, type Validator, Workflow, WorkflowOptions, workflow };
